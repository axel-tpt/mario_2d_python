# ------ Import ------
import pygame
# --- fichier
from world_builder import World
from background import Background
from sol import Sol
from mario import Mario
from block import *

class Game:
    def __init__(self, screen, w, h, menu):
        # Info fenêtre
        self.screen = screen
        self.DISPLAY_W = w
        self.DISPLAY_H = h
        self.menu = menu
        self.ATH = ATH(screen, self, w, h)

        # Création monde
        worldSize = 0
        world = World(screen, self, worldSize)
        world.readCSV()
        self.liste_mob, self.liste_pu, self.liste_piece, self.decor, self.sol, self.end_level = world.content()

        # Initialisation acteurs
        self.bg = Background(screen, w, h)
        self.mario = Mario(screen, w, h, self)

        # Paramètre jeu
        self.play = True
        self.end = False
        self.end_game = False
        self.cam = 1
        self.score = 0
        self.nb_piece = 0
        self.end_anim = False
        self.draw_mario = True

    def event(self):
        if self.play and not self.end:
            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        Sound('Pause.wav', 0.05, False)
                        self.play = False
                    if event.key == pygame.K_SPACE:
                        self.mario.jump()
                    if event.key == pygame.K_RIGHT:
                        pass
                    # ------ touche test ------
                    if event.key == pygame.K_g:
                        self.mario.changeSize()
                    if event.key == pygame.K_f:
                        self.end = True
                
        if not self.play:
            self.menu.pauseMenu.event()

    def update(self):
        if self.play and not self.end:
            self.ATH.update()
            for mob in self.liste_mob :
                mob.update()
            for pu in self.liste_pu :
                pu.update()
            self.bg.update(self.cam)
            for sol in self.sol :
                sol.update()
            self.mario.update()

        if not self.play and not self.end_game:
            self.menu.pauseMenu.update()
        if self.end_anim:
            self.endGame()
        if self.end_game:
            self.menu.endMenu.update()


    def draw(self):
        pygame.draw.rect(self.screen, (0, 255, 0), (0, 0, self.DISPLAY_W, self.DISPLAY_H))
        self.bg.draw(self.cam*2)
        for mob in self.liste_mob :
            mob.draw(self.cam)
        for pu in self.liste_pu :
            pu.draw(self.cam)
        for piece in self.liste_piece :
            piece.draw(self.cam)
        for elt in self.decor :
            elt.draw(self.cam)
            if elt.type == "castle" :
                elt.hitboxDoor(self.cam).draw(self.screen)
        for elt in self.end_level :
            elt.draw(self.cam)
        for sol in self.sol :
            sol.draw(self.cam)
        if self.draw_mario :
            self.mario.draw(self.cam)
        self.ATH.draw()
        if not self.play:
            self.menu.pauseMenu.draw()
        if self.end_game:
            self.menu.nedMenu.update()

    def endGame(self):
        # ------ déplacement ------
        dx = 3
        for elt in self.end_level :
            if elt.type == "castle":
                if elt.xDoor() <= self.mario.rect.x + self.mario.rect.width :
                    if elt.rect.x + elt.rect.width >= self.mario.rect.x + dx :
                        self.draw_mario = False
                        dx = 0
        
        self.mario.rect.x += dx
        self.mario.speed += 1
        if self.mario.speed > 10:
            self.mario.speed = 10
        self.mario.dy += self.mario.speed
        self.mario.rect.y += self.mario.dy
        self.mario.collision_sol()

        # ------ Score ------
        if (500 - self.ATH.time_w) != 0:
            self.ATH.time_w += 1
            self.score += 20
        if self.nb_piece != 0 and (500 - self.ATH.time_w) == 0:
            if self.menu.main.time % 10 == 0 :
                self.nb_piece -= 1
                self.score += 100
        if self.nb_piece == 0 and (500 - self.ATH.time_w) == 0 :
            self.play = False
            self.end_anim = False
            self.end_game = True
        

class ATH(object):
    def __init__(self, screen, game, w, h):
        self.screen = screen
        self.DISPLAY_W = w
        self.DISPLAY_H = h
        self.score = 0
        self.time = 0
        self.time_w = 0
        self.game = game

        self.font = pygame.font.Font("font/super-mario-bros-nes.ttf", 30)

    def draw_score(self):
        m = "mari"+str(0)
        text = self.font.render(m, True, (255, 255, 255))
        text_rect = text.get_rect(topleft = (50, 20))
        text_score = self.font.render(self.write_score(), True, (255, 255, 255))
        text_score_rect = text_score.get_rect(topleft = (50, 60))
        self.screen.blit(text, text_rect)
        self.screen.blit(text_score, text_score_rect)

    def draw_time(self):
        text = self.font.render("time", True, (255, 255, 255))
        text_rect = text.get_rect(topright = (self.DISPLAY_W - 50, 20))
        text_time = self.font.render(str(self.write_time()), True, (255, 255, 255))
        text_time_rect = text_time.get_rect(topright = (self.DISPLAY_W - 50, 60))
        self.screen.blit(text, text_rect)
        self.screen.blit(text_time, text_time_rect)

    def draw_piece_score(self):
        img_preload = pygame.image.load("images/entité/piece.png").convert_alpha()
        img = pygame.transform.scale(img_preload, (45, 50))
        img_rect = img.get_rect(topright = (self.DISPLAY_W - 490, 50))
        text_piece = self.font.render(str(self.write_piece_score()), True, (255, 255, 255))
        text_piece_rect = text_piece.get_rect(topright = (self.DISPLAY_W - 400, 60))
        self.screen.blit(img, img_rect)
        self.screen.blit(text_piece, text_piece_rect)

    def write_score(self):
        score = str(self.game.score)
        score_to_display = ""
        for i in range(len(score)):
            score_to_display += score[i]
        while len(score_to_display) != 5 :
            score_to_display = "0" + score_to_display
        return score_to_display

    def write_piece_score(self):
        nb = str(self.game.nb_piece)
        text_to_display = ""
        for i in range(len(nb)):
            text_to_display += nb[i]
        while len(text_to_display) != 2 :
            text_to_display = "0" + text_to_display
        text_to_display = "x" + text_to_display
        return text_to_display

    def write_time(self):
        time = str(500-self.time_w)
        time_to_display = ""
        for i in range(len(time)):
            time_to_display += time[i]
        while len(time_to_display) != 4 :
            time_to_display = "0" + time_to_display
        return time_to_display

    def update(self, point = 0):
        self.score += point
        self.time += 1
        if self.time % 10 == 0:
            self.time_w += 1

    def draw(self):
        self.draw_score()
        self.draw_time()
        self.draw_piece_score()